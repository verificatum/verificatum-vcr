
/* Copyright 2008-2019 Douglas Wikstrom
 *
 * This file is part of Verificatum Core Routines (VCR).
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.verificatum.crypto;

import java.io.File;
import java.io.IOException;

import com.verificatum.eio.EIOException;
import com.verificatum.eio.ExtIO;
import com.verificatum.eio.Marshalizable;
import com.verificatum.eio.Marshalizer;

/**
 * Source of random bytes. This may be a source of physical truly
 * random bits, or the output of a pseudo-random generator.
 *
 * <br>
 *
 * WARNING! All subclasses must ensure that {@link #getBytes(byte[])}
 * is thread safe (synchronized on this). The intention is that a
 * single instance of this class can serve several threads. Thus,
 * there is no need to make all other methods thread safe.
 *
 * @author Douglas Wikstrom
 */
public abstract class RandomSource implements Marshalizable {

    /**
     * Returns <code>length</code> bytes as a <code>byte[]</code>.
     *
     * @param length Number of generated bytes.
     * @return Random bits.
     */
    public byte[] getBytes(final int length) {
        final byte[] result = new byte[length];
        getBytes(result);
        return result;
    }

    /**
     * Fills the input array with random bytes. WARNING! This must be
     * thread safe for all subclasses.
     *
     * @param array Destination of generated bytes.
     */
    public abstract void getBytes(byte[] array);

    /**
     * Fills the input array with random bytes.
     *
     * @param array Destination of generated bytes.
     * @param start Index of position of first generated byte.
     * @param length Number of bytes generated.
     */
    public void getBytes(final byte[] array,
                         final int start,
                         final int length) {
        final byte[] tmp = getBytes(length);
        System.arraycopy(tmp, 0, array, start, length);
    }

    /**
     * Returns an initialized random source as defined by parameters.
     *
     * @param rsFile File containing a string that can be input to
     * {@link Marshalizer#unmarshalHex_RandomSource(String)}.
     * @param seedFile If the random source is a {@link PRG}, then it
     * must contain a sufficiently long seed.
     * @param tmpSeedFile Temporary seed file used to implement atomic
     * write of a new seed.
     * @return Source of random bits.
     * @throws CryptoException If it is not possible to create a
     * random source from the data on the given files.
     */
    public static RandomSource randomSource(final File rsFile,
                                            final File seedFile,
                                            final File tmpSeedFile)
        throws CryptoException {
        try {
            final String rsString = ExtIO.readString(rsFile);
            final RandomSource randomSource =
                Marshalizer.unmarshalHex_RandomSource(rsString);

            // If the random source is a PRG, then there must
            // exist an associated seed file of sufficient length.
            if (randomSource instanceof PRG) {
                ((PRG) randomSource).setSeedReplaceStored(seedFile,
                                                          tmpSeedFile);
            }
            return randomSource;

        } catch (final IOException ioe) {
            throw new CryptoException("Unable to read random source file! ("
                                      + rsFile.toString() + ") "
                                      + "Use \"vog -rndinit\".",
                                      ioe);
        } catch (final EIOException eioe) {
            final String e = "Unable to create random source! "
                + "Make sure that " + rsFile + " is valid!";
            throw new CryptoException(e, eioe);
        }
    }
}
